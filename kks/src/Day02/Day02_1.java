
//확대축소 컨트롤 +-
//주석처리를 습관화 하자 [코드 설명]
//주석 1. // 2, ./**/

package Day02; // 패키지 이름

public class Day02_1 { // 클래스 시작

	//1. 모든 코드작성은 클래스 {} 안에서 작성한다.
	//2. 실행할 코드는 main 함수 {} 안에서 작성한다. [스래드 : 코드를 읽어주는 역할]
	//3. 자동완성 1~3글자 입력후 Ctrl + 스페이스
	//4. 중괄호 {} 안에서 tap
	
	//메모리 : 컴퓨터에서 저장하는 공간  [ RAM ] : 자원관리 
	
	//변수
		//1. 데이터를 1개 저장하는 메모리 공간 [ 저장상자 ]
		//2. 변수 선언 [ 자료명 변수명 ; ]
		//3. 변수 초기화(처음값) [ 자료형 변수명 = 데이터; ]
		//4. 변수 호출 [변수이름]
	//용량 단위
		// 0 혹은 1 -> 1비트
		// 01010101 -> 8비트 -> 1 바이트
		// 1024바이트 -> 1kb -> 1024kb -> 1mb -> 1024mb -> 1gb 
	//자료형
		//1. 메모리를 효율성을 따져 아껴쓰자.
		//2. 메모리의 
		//boolean - 1비트   : 참 거짓 0,1 true false
		//char    - 2바이트  : 문자 1개 [아스키코드 > 유니코드] 
		//byte    - 1바이트  : 정수 +-128
		//short   - 2바이트  : 정수 +-3만정도
		//int     - 4바이트  : 정수 20억 정도
		//long    - 8바이트  : 정수 20억 이상
		//float   - 4바이트  : 실수(소수점)
		//double  - 8바이트  : 실수(소수점)
			//순서만 기억하자!
	
		//빈공간이 많아지면 효율성이 떨어진다.
		//메모리가 증가하면 속도가 줄어든다.
		//반대로 메모리가 줄어들면 속도가 빨라진다.
		//
	
	public static void main(String[] args) { 
		
		//p.35 예제 1
		int value = 10;//1.변수의 선언과 초기화를 의미함 
		//int : +- 20억 정도의 데이터를 저장할수 있는 상자
			//value [아무거나] : 상자의 이름 (개발자가 구분하기 위해서)
				// = : 오른쪽 데이터가 왼쪽에 대입[저장]
		// * 정수 10을 int형 value 변수에 저장
		
		int result  = value + 10;
		//int : +- 20억 정도의 데이터를 저장할수 있는 상자
			//result [아무거나] : 상자의 이름
				//변수호출[변수불러오기[ + 10
		//		10 + 10
		
		//System.out.println("단축키 최고야!");
		System.out.println(result);//출력 (변수이름)
		
	}

} //클래스 끝
