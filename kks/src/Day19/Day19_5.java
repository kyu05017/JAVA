package Day19;

import java.util.TreeSet;

public class Day19_5 {

	public static void main(String[] args) {
		
		// p. 753 : TreeSet 클래스
			// 1. 하나의 객체 = 노드
			// 2. 각 노드는 최대 2개의 자식 노드를 가질수 있다.
			// 3. 부모보다 작으면 왼족 자식 / 부모보다 크면 오른쪽 자식
			// 4. 트리구조에서 가장 왼쪽에 있는 값이 가장 작은값
			//			   가장 오른쪽에 있는 값이 가장 큰값
		
		// 1. TreeSet 클래스의 객체 선언
		TreeSet<Integer> scores = new TreeSet<>();
		
		// 2. TreeSet 객체에 객체 ( 요소 ) 추가 
		System.out.println("자동 정렬");
		scores.add(87);
		System.out.println("확인 : " + scores);
		scores.add(98);
		System.out.println("확인 : " + scores);
		scores.add(75);
		System.out.println("확인 : " + scores);
		scores.add(95);
		System.out.println("확인 : " + scores);
		scores.add(80);
		System.out.println("확인 : " + scores);

		Integer score = null;
		
		score = scores.first();
		System.out.println("가장 낮은 점수 : " + score);
		
		score = scores.last();
		System.out.println("가장 높은 점수 : " + score);
		
		score = scores.lower(95);
		System.out.println("가장 95점 아래 점수 : " + score);
		
		score = scores.higher(95);
		System.out.println("가장 95점 위 점수 : " + score);
		
		score = scores.floor(95);
		System.out.println("가장 95점과 같거나 바로 아래 점수 : " + score);
		
		score = scores.ceiling(85);
		System.out.println("가장 85점과 같거나 바로 위 점수 : " + score);
		
		// 4. 삭제 
		System.out.println(scores.pollFirst()); // 가장 왼쪽 노드를 삭제
		System.out.println(scores.pollLast()); 	// 가장 오른쪽 노드를 삭제 
		System.out.println("확인 : " + scores);
		
	}
	
}
