package Day14;

public class Day14_1 {
	
	public static void main(String[] args) {
		
		// 클래스 
				// 클래스를 사용하는 이유
				// 1. 여러개의 서로 다른 자료형[필드(메모리)] 묶음으로 관리 가능
				// 2. 클래스 ( 설계도 : 목적 ) 기반으로 많은 ( 서로 다른 ) 객체를 생성할수 있다.
					// * 주차관리 설계
						// 차량번호 입차시간 출차시간 금액
					// * 차량 객체
						// ( 변수4개 X 차량수 ) VS ( 차량수 X 객체수 )
				// 3. API ( 라이브러리 ) : 미리 만들어진 클래스가 있다.
					// * String 클래스
					// * Scanner 클래스
					// 만들어진 클래스를 이용한 빠른 개발 가능
				// 4. 필드 [ 메모리( 기록 공간 ) ] , 생성자 [ 객체 생성시 초기값 ] , 메소드
					// 필드 : 변수, 배열 , 객체, 인터페이스 등등
					// 생성자 : 
						// 붕어빵 클래스 
							// 필드 : 내용물 [ 밭, 슈크림 ] 
						// 붕어빵틀 [ 클래스 ] -> 빈생성자		-> 내용물 없는 붕어빵 -> 추후에 내용물 추가
						
						// 붕어빵틀 [ 클래스 ] -> 풀생성자		-> 내용물이 있는 붕어빵
					// 메소드 : 코드 묶음 처리 [ 동작 ]

		
		
			// 예1) 회원
				// 회원가입 할때 필요한 정보 기록[ 메모리 ]
		
			// * 변수만 사용 했을경우
				// 1. 회원이 생성 될때 마다 변수의 수 회원수 X 변수 의 개수 > 변수가 많아서 관리가 어럽다.
				// 2. 변수가 동일하면 배열을 사용가능/ 하지만 서로 다른 변수간 배열X
				// 회원 1
				String id = "a";
				String pw = "12";
				String name = "name";
				// 회원 2
				String id_2 = "a";
				String pw_2 = "12";
				String name_2 = "name";
				
			// * 객체화 
				//회원1
				Account temp = new Account();
				temp.id = "1234";
				temp.pw = "1234";
				temp.name = "1234";
				temp.point = 1000;
				//회원2
				Account temp2 = new Account();
				temp2.id = "1234";
				temp2.pw = "1234";
				temp2.name = "1234";
				temp2.point = 1000;
				
				
	}
	
	
	
	
}
